defmodule LiveOperationsWeb.Counter do
  use Phoenix.LiveView
  alias Phoenix.PubSub

  
  @presence_topic "presence"

  def mount(_params, _session, socket) do
    # PubSub.subscribe(LiveViewCounter.PubSub, @topic)

    # Presence.track(self(), @presence_topic, socket.id, %{})
    # LiveOperationsWeb..Endpoint.subscribe(@presence_topic)

    # initial_present =
    #   Presence.list(@presence_topic)
    #   |> map_size

    {:ok, assign(socket, val: :count) }
  end

  def handle_event("inc", _, socket) do
    {:noreply, assign(socket, :val, + 1)}
  end

  def handle_event("dec", _, socket) do
    {:noreply, assign(socket, :val,- 1)}
  end

  def handle_info({:count, count}, socket) do
    {:noreply, assign(socket, val: count)}
  end

 

  def render(assigns) do
    ~L"""
    <div id="livecount_container">
      <h1>The count is: <%= @val %></h1>
      <button phx-click="dec">-</button>
      <button phx-click="inc">+</button>
      <h1>Current users: <%= @present %></h1>
    </div>
    """
  end
end
